<?php 
namespace Rasel\CustomModule\Block\Widget;
use Magento\Framework\View\Element\Template;
use Magento\Widget\Block\BlockInterface;
use Magento\Framework\View\Element\Template\Context;
use Magento\Framework\UrlInterface;

use Magento\Framework\App\Filesystem\DirectoryList;

class SubCategory extends Template implements BlockInterface
{
    protected $_template="widget/sub-category.phtml";

    protected $_categoryHelper;
    protected $_storeManager;
    protected $categoryRepository;
    protected $_categoryFactory;
    protected $urlBuilder;

    protected $imageFactory;
    protected $filesystem;

    
    
    public function __construct(
        Context $context, 
        \Magento\Catalog\Helper\Category $categoryHelper,
        \Magento\Store\Model\StoreManagerInterface $storeManager,
        \Magento\Catalog\Model\CategoryRepository $categoryRepository,
        \Magento\Catalog\Model\CategoryFactory $categoryFactory,
        UrlInterface $urlBuilder,
        \Magento\Framework\Image\AdapterFactory $imageFactory,
        \Magento\Framework\Filesystem $filesystem,
        array $data = []
    ) {
        
        $this->_categoryHelper = $categoryHelper;
        $this->_storeManager = $storeManager;
        $this->categoryRepository = $categoryRepository;
        $this->_categoryFactory = $categoryFactory;
        $this->urlBuilder = $urlBuilder;

        $this->imageFactory = $imageFactory;
        $this->filesystem = $filesystem;
        $this->directory = $filesystem->getDirectoryWrite(DirectoryList::MEDIA);
        parent::__construct(
            $context,
            $data
        );
    }

    /**
     * Return categories helper
     */   
    public function getCategoryHelper()
    {
        return $this->_categoryHelper;
    }

    public function getStoreId()
    {
        return $this->_storeManager->getStore()->getCode();
    }

    public function getBaseUrl()
    {
        return $this->_storeManager->getStore()->getBaseUrl();
    }

    public function getSubCategory($parentCategory){
        $categoryObj = $this->categoryRepository->get($parentCategory);
        $subcategories = $categoryObj->getChildrenCategories();

        return $subcategories;
    }

    public function getCategoryImage($categoryId)
    {
        $categoryIdElements = explode('-', $categoryId);
        $category           = $this->categoryRepository->get(end($categoryIdElements));
        $categoryImage       = $category->getImageUrl();

        return $categoryImage;
    }


    // public function getResizeImage($imageName,$width = 400,$height = 400)
    // {
    //     /* Real path of image from directory */
    //     $realPath = $this->filesystem->getDirectoryRead(DirectoryList::MEDIA)->getAbsolutePath('catalog/category/'.$imageName);
    //     if (!$this->directory->isFile($realPath) || !$this->directory->isExist($realPath)) {
    //         return false;
    //     }
    //     /* Target directory path where our resized image will be save */
    //     $targetDir = $this->filesystem->getDirectoryRead(DirectoryList::MEDIA)->getAbsolutePath('resized/'.$width.'x'.$height);
    //     $pathTargetDir = $this->directory->getRelativePath($targetDir);
    //     /* If Directory not available, create it */
    //     if (!$this->directory->isExist($pathTargetDir)) {
    //         $this->directory->create($pathTargetDir);
    //     }
    //     if (!$this->directory->isExist($pathTargetDir)) {
    //         return false;
    //     }
    //     $image = $this->imageFactory->create();
    //     $image->open($realPath);
    //     $image->keepAspectRatio(true);
    //     $image->resize($width,$height);
    //     $dest = $targetDir . '/' . pathinfo($realPath, PATHINFO_BASENAME);
    //     $image->save($dest);
    //     if ($this->directory->isFile($this->directory->getRelativePath($dest))) {
    //         return $this->storeManager->getStore()->getBaseUrl(\Magento\Framework\UrlInterface::URL_TYPE_MEDIA).'resized/'.$width.'x'.$height.'/'.$imageName;
    //     }
    //     return false;
    // }


}